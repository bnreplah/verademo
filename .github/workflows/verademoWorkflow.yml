name: Verademo Default Workflow - Maven Build and Scan MultiJob

on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
    workflow_dispatch: 
      inputs:
          VeracodeCLI:
            description: 'Package Using Veracode CLI'
            required: true
            type: 'boolean'
            default: 'true'
env:
  SRCCLR_API_TOKEN: ${{secrets.SRCCLR_API_TOKEN}}
  VERACODE_API_KEY_ID: ${{secrets.VERACODE_API_ID}}
  VERACODE_API_KEY_SECRET: ${{secrets.VERACODE_API_KEY}}
  
jobs:
  build:
    runs-on: ubuntu-latest
    # grants permissions for the artifact to be uploaded
    permissions:
      contents: write
      packages: write
    
    
    steps:
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can acces it and clones the repo
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install the Veracode CLI
        if: ${{ github.event.inputs.VeracodeCLI }}
        run: |
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode --help
            ls
            ./veracode package -a -d -s . 
            ls
            
            
          
      - name: Build with Maven
        if: ${{ ! github.event.inputs.VeracodeCLI }}
        run: |
          cd app/
          mvn -B clean package --file pom.xml
          ls target/
          
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.4.3
        with:
            # Artifact name
            name: verademo-artifact
            # optional, default is artifact
            # A file, directory or wildcard pattern that describes what to upload
            path: app/target/verademo.war
            # The desired behavior if no files are found using the provided path.
            if-no-files-found: warn
        
  veracode-sast-analysis:
    # Requires the previous step to be completed prior to moving onto this step, otherwise can be set to run in parallel
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2.0.10
        with: 
          name: verademo-artifact
          path: analysis/
      - run: pwd
      - run: ls -la analysis/
      - name: Veracode Pipeline-Scan
      # You may pin to the exact commit or the version.
      # uses: veracode/Veracode-pipeline-scan-action@7bbcef3efc8720d36302fc912a7d63f7aba34f76
        uses: veracode/Veracode-pipeline-scan-action@v1.0.14
        with:
            # vid
            vid: ${{secrets.VERACODE_API_ID}}
            # vkey
            vkey: ${{secrets.VERACODE_API_KEY}}
            # Filename of the packaged application to upload and scan.
            file: analysis/verademo.war
            # GITHUB_TOKEN or a repo scoped PAT.
            token: ${{ secrets.GH_TOKEN }} # default is ${{ github.token }}
            # Name of the security policy to download as a file. Required only if you want to download the configuration for a custom policy defined by your organization. After downloading the policy, you can provide this file in a subsequent command using the policy_file parameter.
            #request_policy: # optional
            # Fail the pipeline job if the scan finds flaws of the specified severities. Enter a comma-separated list of severities in quotation marks.
            #fail_on_severity: # optional
            # Fail the pipeline job if the scan finds flaws of the specified CWEs. Enter a comma-separated list of CWE IDs.
            #fail_on_cwe: # optional
            # Filter the flaws that exist in the specified baseline file and show only the additional flaws in the current scan.
            #baseline_file: # optional
            # Name of the Veracode default policy rule to apply to the scan results. You can only use this parameter with a Veracode default policy.
            #policy_name: # optional
            # Name of the local policy file you want to apply to the scan results. To download this file, use the --request_policy parameter.
            #policy_file: # optional
            # Amount of time, in minutes, for the Pipeline Scan to wait before reporting an unsuccessful scan if the scan does not complete. Default is 60 minutes, which is also the maximum value.
            #timeout: # optional
            # Enter true to show detailed messages for each issue in the results summary.
            #issue_details: # optional
            # Enter true to show a human-readable results summary on the console. Default is true.
            #summary_display: # optional
            # Enter true to show the JSON containing the scan results on the console. Default is false.
            #json_display: # optional
            # Enter true to display detailed messages in the scan results. Default is false.
            #verbose: # optional
            # Enter true to save the scan results as a human-readable file. Default is false.
            #summary_output: # optional
            # Enter the filename of the scan results summary file. The file is stored in the current directory. Default is results.txt.
            #summary_output_file: # optional
            # Enter true to save the scan results in JSON format. Default is true.
            #json_output: # optional
            # Rename the JSON file that contains the scan results. The file is stored in the current directory. Default filename is results.json.
            #json_output_file: # optional
            # Enter the filename in the current directory to save results that violate pass-fail criteria. Default is filtered_results.json.
            #filtered_json_output_file: # optional
            # Enter the name of the CI/CD code repository that runs a Pipeline Scan. This parameter adds the repository name to the scan results, which can help you track scans across repositories.
            #project_name: # optional
            # Enter the source control URL for the CI/CD code repository that runs a Pipeline Scan.
            #project_url: # optional
            # Enter the source control reference, revision, or branch for the CI/CD code repository that runs a Pipeline Scan.
            #project_ref: # optional
            # Enter the [application profile](https://docs.veracode.com/r/request_profile) ID for the application you want to upload and scan.
            #app_id: # optional
            # Enter one these values, which are case-sensitive, for the type of development stage: Development, Testing, Release.
            #development_stage: # optional
            # Enable debug mode. 1 for on
            #debug: # optional
            # Enable the storage of a baseline file. Takes true or fales
            #store_baseline_file: # optional
            # Enter the branch name where the baseline file should be stored
            #store_baseline_file_branch: # optional
            # From which results should the baseline file be created. standard = full results || filtered = filtered results
            #create_baseline_from: # optional
            # Fail the build upon findings. Takes true or false
            # fail_build: # optional
            # Enter a case-sensitive, comma-separated list of name patterns that represent the names of the modules to scan as top-level modules. Veracode identifies these modules during prescan. The * wildcard matches zero or more characters. The ? wildcard matches exactly one character. For example, to include various module names that contain module: --include "module 1, module-*, module2.jar". The scan results show the names of the modules that Veracode identified and the modules included in the scan. This parameter does not pause, stop, or impact the performance of your pipeline.
            # include: # optional
              

      
      - name: Veracode Upload And Scan
        # You may pin to the exact commit or the version.
        # uses: veracode/veracode-uploadandscan-action@35794dab9fbcd28fac19e44963f80646b27f4a7f
        uses: veracode/veracode-uploadandscan-action@0.2.4
        with:
          # appname
          appname: Verademo
          # createprofile
          createprofile: false # default is true
          # filepath
          filepath: analysis/verademo.war
          # version
          version:  ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }} # default is Scan from Github job: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
          # vid
          vid: ${{secrets.VERACODE_API_ID}}
          # vkey
          vkey: ${{secrets.VERACODE_API_KEY}}
          # true or false
          #createsandbox: false # optional
          # name of the sandbox
          #sandboxname: # optional
          # wait X minutes for the scan to complete
          #scantimeout: # optional
          # modules to exclude from module selection
          #exclude: # optional
          # modules to include in module selection
          #include: # optional
          # business criticality - policy selection
          #criticality: # optional
          # filename pattern
          #pattern: # optional
          # replacement
          #replacement: # optional
          # specify to scan in a sandbox
          #sandboxid: # optional
          # All top level modules
          #scanallnonfataltoplevelmodules: # optional
          # platform selected modules
          #selected: # optional
          # selected modules like from previous scan
          #selectedpreviously: # optional
          # teams
          #teams: # optional
          # teams
          #toplevel: # optional
          # automatically delete the current scan if there are any errors when uploading files or starting the scan
          deleteincompletescan: 1 # optional
          # specify version of the Java API Wrapper; default is latest
          #javawrapperversion: # optional
          # show detailed diagnostic information, which you can use for debugging, in the output.
          debug: 1 # optional

      - name: Build JSON file
        run: |
          touch input.json
          echo '{"name": "${{ vars.DAST_NAME}}", "scans": [{"scan_config_request": { "target_url": { "url": "${{vars.SCAN_URL}}" }}}],"schedule": {"duration": {"length": 1,"unit": "DAY"},"scheduled": true,"now": true }}' >> input.json
      - name: Create DAST Scan
        run: |
          python --version
          python -m pip install --upgrade pip wheel
          python -m pip install httpie
          pip install veracode-api-signing
          cat input.json | http --auth-type=veracode_hmac POST "https://api.veracode.com/was/configservice/v1/analyses?run_verification=true" 
        env:
          VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
          VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY }}
